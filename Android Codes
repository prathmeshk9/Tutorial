// Background UI Process

getActivity().runOnUiThread(new Runnable() {
	@Override
	public void run() {
		
	}
});

// Background Process

new AsyncTask<String, String, String>() {
	@Override
	protected String doInBackground(String... strings) {

		return null;
	}
};


// On Back Press on Activity

@Override
public boolean onKeyDown(int keyCode, KeyEvent event) {

    if( keyCode==KeyEvent.KEYCODE_BACK) 
    {   

        finish();
    }     
     return super.onKeyDown(keyCode, event); 

}

//Fragment Back Press Off

@Override
    public void onResume() {
	super.onResume();

	if (getView() == null) {
		return;
	}

	getView().setFocusableInTouchMode(true);
	getView().requestFocus();
	getView().setOnKeyListener(new View.OnKeyListener() {
		@Override
		public boolean onKey(View v, int keyCode, KeyEvent event) {

			if (event.getAction() == KeyEvent.ACTION_UP && keyCode == KeyEvent.KEYCODE_BACK) {
				// handle back button's click listener
				//UserEvent.viewPager.setCurrentItem(0);
				return true;
			}
			return false;
		}
	});
}
// Bitmap Writing into an Image Resource
public static Bitmap getRoundedCornerBitmap(Bitmap bitmap, int pixels) {
	Bitmap output = Bitmap.createBitmap(bitmap.getWidth(), bitmap.getHeight(), Bitmap.Config.ARGB_8888);
	Canvas canvas = new Canvas(output);

	final int color = 0xff424242;
	final Paint paint = new Paint();
	final Rect rect = new Rect(0, 0, bitmap.getWidth(), bitmap.getHeight());
	final RectF rectF = new RectF(rect);
	final float roundPx = pixels;

	paint.setAntiAlias(true);
	canvas.drawARGB(0, 0, 0, 0);
	paint.setColor(color);
	canvas.drawRoundRect(rectF, roundPx, roundPx, paint);

	paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
	canvas.drawBitmap(bitmap, rect, rect, paint);

	return output;
}

// Network Check
public class ConnectionUtils {

    public static boolean haveNetworkConnection(Context context) {
        boolean haveConnectedWifi = false;
        boolean haveConnectedMobile = false;

        ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context
                .CONNECTIVITY_SERVICE);
        NetworkInfo[] netInfo = cm.getAllNetworkInfo();
        for (NetworkInfo ni : netInfo) {
            if (ni.getTypeName().equalsIgnoreCase("WIFI"))
                if (ni.isConnected())
                    haveConnectedWifi = true;
            if (ni.getTypeName().equalsIgnoreCase("MOBILE"))
                if (ni.isConnected())
                    haveConnectedMobile = true;
        }
        return haveConnectedWifi || haveConnectedMobile;
    }
}

// hide Keyboard
public void hideKeyboard() {
	InputMethodManager inputMethodManager = (InputMethodManager) this.getSystemService(Activity.INPUT_METHOD_SERVICE);
	//Find the currently focused view, so we can grab the correct window token from it.
	View view = this.getCurrentFocus();
	//If no view currently has focus, create a new one, just so we can grab a window token from it
	if (view == null) {
		view = new View(this);
	}
	inputMethodManager.hideSoftInputFromWindow(view.getWindowToken(), 0);
}
