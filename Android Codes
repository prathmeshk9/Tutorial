// Background UI Process

getActivity().runOnUiThread(new Runnable() {
	@Override
	public void run() {
		
	}
});

// Background Process

new AsyncTask<String, String, String>() {
	@Override
	protected String doInBackground(String... strings) {

		return null;
	}
};


// On Back Press on Activity

@Override
public boolean onKeyDown(int keyCode, KeyEvent event) {

    if( keyCode==KeyEvent.KEYCODE_BACK) 
    {   

        finish();
    }     
     return super.onKeyDown(keyCode, event); 

}

//Fragment Back Press Off

@Override
    public void onResume() {
	super.onResume();

	if (getView() == null) {
		return;
	}

	getView().setFocusableInTouchMode(true);
	getView().requestFocus();
	getView().setOnKeyListener(new View.OnKeyListener() {
		@Override
		public boolean onKey(View v, int keyCode, KeyEvent event) {

			if (event.getAction() == KeyEvent.ACTION_UP && keyCode == KeyEvent.KEYCODE_BACK) {
				// handle back button's click listener
				//UserEvent.viewPager.setCurrentItem(0);
				return true;
			}
			return false;
		}
	});
}
// Bitmap Writing into an Image Resource
public static Bitmap getRoundedCornerBitmap(Bitmap bitmap, int pixels) {
	Bitmap output = Bitmap.createBitmap(bitmap.getWidth(), bitmap.getHeight(), Bitmap.Config.ARGB_8888);
	Canvas canvas = new Canvas(output);

	final int color = 0xff424242;
	final Paint paint = new Paint();
	final Rect rect = new Rect(0, 0, bitmap.getWidth(), bitmap.getHeight());
	final RectF rectF = new RectF(rect);
	final float roundPx = pixels;

	paint.setAntiAlias(true);
	canvas.drawARGB(0, 0, 0, 0);
	paint.setColor(color);
	canvas.drawRoundRect(rectF, roundPx, roundPx, paint);

	paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
	canvas.drawBitmap(bitmap, rect, rect, paint);

	return output;
}

// Network Check
public class ConnectionUtils {

    public static boolean haveNetworkConnection(Context context) {
        boolean haveConnectedWifi = false;
        boolean haveConnectedMobile = false;

        ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context
                .CONNECTIVITY_SERVICE);
        NetworkInfo[] netInfo = cm.getAllNetworkInfo();
        for (NetworkInfo ni : netInfo) {
            if (ni.getTypeName().equalsIgnoreCase("WIFI"))
                if (ni.isConnected())
                    haveConnectedWifi = true;
            if (ni.getTypeName().equalsIgnoreCase("MOBILE"))
                if (ni.isConnected())
                    haveConnectedMobile = true;
        }
        return haveConnectedWifi || haveConnectedMobile;
    }
}

// hide Keyboard
public void hideKeyboard() {
	InputMethodManager inputMethodManager = (InputMethodManager) this.getSystemService(Activity.INPUT_METHOD_SERVICE);
	//Find the currently focused view, so we can grab the correct window token from it.
	View view = this.getCurrentFocus();
	//If no view currently has focus, create a new one, just so we can grab a window token from it
	if (view == null) {
		view = new View(this);
	}
	inputMethodManager.hideSoftInputFromWindow(view.getWindowToken(), 0);
}

// Blue Tooth Send Apk

ApplicationInfo app = getApplicationContext().getApplicationInfo();
String filePath = app.sourceDir;

Intent intent = new Intent(Intent.ACTION_SEND);

// MIME of .apk is "application/vnd.android.package-archive".
// but Bluetooth does not accept this. Let's use "*/*" instead.
intent.setType("*/*");

// Only use Bluetooth to send .apk
intent.setPackage("com.android.bluetooth");

// Append file and send Intent
intent.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(new File(filePath)));
startActivity(Intent.createChooser(intent, "Share app"));

Websites are useable

http://www.truiton.com/
http://www.survivingwithandroid.com/
http://www.techrepublic.com/
http://www.theappguruz.com/
http://programmerguru.com/
https://www.reddit.com
http://www.androprogrammer.com/
http://www.mysamplecode.com/
https://gooroo.io/

Apis
http://openweathermap.org/appid#get

// FCM Send Notification :
https://fcm.googleapis.com/fcm/send

{ "notification": {
    "title": "hi welcome to",
    "body": "hello ggg"
  },
  "to" : "cwpO595twOE:APA91bHvjUVE2DdcgdhpQeWaZdwpn00Yu-aZ-VaUE_XwEdOv0wvvTZYR61GyeBKLV7_2d89yJxXO88rsZ8FGawHebH1QIS-jdiA0Aydg3LgTCbVcomP83erypG971BCyXHSQNY7CkMxA"
}


/* Check Internet Connection in android */
-----------------------------------------------------------------------

<uses-permission android:name="android.permission.INTERNET"/>
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>


public boolean isNetworkAvailable() {
    ConnectivityManager manager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
    NetworkInfo networkInfo = manager.getActiveNetworkInfo();

    boolean isAvailable = false;
    if (networkInfo != null && networkInfo.isConnected()) {
        isAvailable = true;
    }
    return isAvailable;
}

-----------------------------------------------------------------------
/* Alert Dialog Box */

AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(this);
        alertDialogBuilder.setMessage("Are you sure,You wanted to make decision");

alertDialogBuilder.setPositiveButton("Yes", new DialogInterface.OnClickListener() {
	@Override
	public void onClick(DialogInterface arg0, int arg1) {
		Toast.makeText(SplashScreen.this,"You clicked yes button", Toast.LENGTH_LONG).show();
	}
});

alertDialogBuilder.setNegativeButton("No",new DialogInterface.OnClickListener() {
	@Override
	public void onClick(DialogInterface dialog, int which) {
		finish();
	}
});

AlertDialog alertDialog = alertDialogBuilder.create();
alertDialog.show();
alertDialog.setCancelable(false);


-----------------------------------------------------------------------
/* call another activity */
Intent intent = new Intent(SplashScreen.this, LoginActivity.class);
startActivity(intent);

-----------------------------------------------------------------------
/* Check Location Manager enable  */
 
<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION"/>
 
public static boolean isLocationEnabled(Context context) {
	int locationMode = 0;
	String locationProviders;

	if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT){
		try {
			locationMode = Settings.Secure.getInt(context.getContentResolver(), Settings.Secure.LOCATION_MODE);

		} catch (Settings.SettingNotFoundException e) {
			e.printStackTrace();
		}

		return locationMode != Settings.Secure.LOCATION_MODE_OFF;

	}else{
		locationProviders = Settings.Secure.getString(context.getContentResolver(), Settings.Secure.LOCATION_PROVIDERS_ALLOWED);
		return !TextUtils.isEmpty(locationProviders);
	}
}

-----------------------------------------------------------------------
/*  */

