// Background UI Process

getActivity().runOnUiThread(new Runnable() {
	@Override
	public void run() {
		
	}
});

// Background Process

new AsyncTask<String, String, String>() {
	@Override
	protected String doInBackground(String... strings) {

		return null;
	}
};


// On Back Press on Activity

@Override
public boolean onKeyDown(int keyCode, KeyEvent event) {

    if( keyCode==KeyEvent.KEYCODE_BACK) 
    {   

        finish();
    }     
     return super.onKeyDown(keyCode, event); 

}

//Fragment Back Press Off

@Override
    public void onResume() {
	super.onResume();

	if (getView() == null) {
		return;
	}

	getView().setFocusableInTouchMode(true);
	getView().requestFocus();
	getView().setOnKeyListener(new View.OnKeyListener() {
		@Override
		public boolean onKey(View v, int keyCode, KeyEvent event) {

			if (event.getAction() == KeyEvent.ACTION_UP && keyCode == KeyEvent.KEYCODE_BACK) {
				// handle back button's click listener
				//UserEvent.viewPager.setCurrentItem(0);
				return true;
			}
			return false;
		}
	});
}
// Bitmap Writing into an Image Resource
public static Bitmap getRoundedCornerBitmap(Bitmap bitmap, int pixels) {
	Bitmap output = Bitmap.createBitmap(bitmap.getWidth(), bitmap.getHeight(), Bitmap.Config.ARGB_8888);
	Canvas canvas = new Canvas(output);

	final int color = 0xff424242;
	final Paint paint = new Paint();
	final Rect rect = new Rect(0, 0, bitmap.getWidth(), bitmap.getHeight());
	final RectF rectF = new RectF(rect);
	final float roundPx = pixels;

	paint.setAntiAlias(true);
	canvas.drawARGB(0, 0, 0, 0);
	paint.setColor(color);
	canvas.drawRoundRect(rectF, roundPx, roundPx, paint);

	paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
	canvas.drawBitmap(bitmap, rect, rect, paint);

	return output;
}

// Network Check
public class ConnectionUtils {

    public static boolean haveNetworkConnection(Context context) {
        boolean haveConnectedWifi = false;
        boolean haveConnectedMobile = false;

        ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context
                .CONNECTIVITY_SERVICE);
        NetworkInfo[] netInfo = cm.getAllNetworkInfo();
        for (NetworkInfo ni : netInfo) {
            if (ni.getTypeName().equalsIgnoreCase("WIFI"))
                if (ni.isConnected())
                    haveConnectedWifi = true;
            if (ni.getTypeName().equalsIgnoreCase("MOBILE"))
                if (ni.isConnected())
                    haveConnectedMobile = true;
        }
        return haveConnectedWifi || haveConnectedMobile;
    }
}

// hide Keyboard
public void hideKeyboard() {
	InputMethodManager inputMethodManager = (InputMethodManager) this.getSystemService(Activity.INPUT_METHOD_SERVICE);
	//Find the currently focused view, so we can grab the correct window token from it.
	View view = this.getCurrentFocus();
	//If no view currently has focus, create a new one, just so we can grab a window token from it
	if (view == null) {
		view = new View(this);
	}
	inputMethodManager.hideSoftInputFromWindow(view.getWindowToken(), 0);
}

// Gradle Magic

 // google services
    compile 'com.google.android.gms:play-services-analytics:10.0.1'
    compile 'com.google.android.gms:play-services-plus:10.0.1'
    compile 'com.google.android.gms:play-services-auth:10.0.1'

    // layout data binding
    compile 'com.jakewharton:butterknife:8.2.1'

    // button selection effect
    compile 'com.balysv:material-ripple:1.0.2'
    // material design
    compile 'com.github.rey5137:material:1.2.2'
    // facebook sdk library
    compile 'com.facebook.android:facebook-android-sdk:[4,5)'
    // cross profile layout library
    compile 'com.github.IntruderShanky:FunkyHeader:1.2.1'
    // daigonal layout library
    compile 'com.github.florent37:diagonallayout:1.0.2'
    compile 'com.flaviofaria:kenburnsview:1.0.7'
    // circle image
    compile 'de.hdodenhof:circleimageview:2.1.0'
    compile 'com.codemybrainsout.rating:ratingdialog:1.0.2'
    // image loading
    compile 'com.github.bumptech.glide:glide:3.7.0'
    // async task
    compile 'com.koushikdutta.ion:ion:2.+'
    compile 'com.facebook.fresco:fresco:0.14.1'
    // custom login button
    compile 'com.shaishavgandhi:login-buttons:0.1.1'
    // dialog box
    compile 'com.afollestad.material-dialogs:core:0.9.1.0'
    // date picker
    compile 'com.wdullaer:materialdatetimepicker:3.0.0'

    // core libraries
    compile 'com.android.support:design:25.0.1'
    compile 'com.android.support:appcompat-v7:25.0.1'
    compile 'com.android.support:support-v4:25.0.1'
    compile 'com.android.support:cardview-v7:25.0.1'
    compile 'com.android.support:recyclerview-v7:25.0.1'
    testCompile 'junit:junit:4.12'
    
    
    // Bluetooth Send Apk

ApplicationInfo app = getApplicationContext().getApplicationInfo();
String filePath = app.sourceDir;

Intent intent = new Intent(Intent.ACTION_SEND);

// MIME of .apk is "application/vnd.android.package-archive".
// but Bluetooth does not accept this. Let's use "*/*" instead.
intent.setType("*/*");

// Only use Bluetooth to send .apk
intent.setPackage("com.android.bluetooth");

// Append file and send Intent
intent.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(new File(filePath)));
startActivity(Intent.createChooser(intent, "Share app"));



